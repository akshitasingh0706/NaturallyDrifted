from typing import Callable, Dict, Optional, Union
from gensim.test.utils import common_texts
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from sentence_transformers import SentenceTransformer

class baseModels:
    def __init__(self, sample_ref: Optional[Union[np.ndarray, list, None]], 
                 model_name: Optional[Union[str, None]]):
        self.sample_ref = sample_ref
        self.model_name = model_name

    def doc2vec_base(self, 
                    vector_size: Optional[int] = 5,
                    window: Optional[int] = 2,
                    min_count: Optional[int] = 1,
                    workers: Optional[int] = 4):
        '''
        sample_ref: dataset to get samples for "Tagged Documents"
        Doc2Vec params:
            vector_size
            window
            min_count
            workers
        '''
        documents = [TaggedDocument(self.sample_ref, [i]) for i, doc in enumerate(common_texts)]
        model = Doc2Vec(documents, window = window, min_count = min_count, workers = workers, vector_size = 5)
        return model

    def sbert_base(self):
        model = SentenceTransformer(self.model_name)
        return model